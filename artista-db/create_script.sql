-- MySQL Script generated by MySQL Workbench
-- Sun Jan 14 14:16:51 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema artista
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `artista` ;

-- -----------------------------------------------------
-- Schema artista
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `artista` DEFAULT CHARACTER SET utf8 ;
USE `artista` ;

-- -----------------------------------------------------
-- Table `artista`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`user` ;

CREATE TABLE IF NOT EXISTS `artista`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `pwdhash` VARCHAR(45) NOT NULL,
  `regTimestamp` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `type` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `artista`.`seller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`seller` ;

CREATE TABLE IF NOT EXISTS `artista`.`seller` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user` INT NOT NULL,
  `rating` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `id_idx` (`user` ASC),
  CONSTRAINT `fk_seller_user`
    FOREIGN KEY (`user`)
    REFERENCES `artista`.`user` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `artista`.`picture`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`picture` ;

CREATE TABLE IF NOT EXISTS `artista`.`picture` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `seller` INT NOT NULL,
  `isProfile` TINYINT NOT NULL,
  `path` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_picture_seller_idx` (`seller` ASC),
  CONSTRAINT `fk_picture_seller`
    FOREIGN KEY (`seller`)
    REFERENCES `artista`.`seller` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = big5;


-- -----------------------------------------------------
-- Table `artista`.`category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`category` ;

CREATE TABLE IF NOT EXISTS `artista`.`category` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `artista`.`listing`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`listing` ;

CREATE TABLE IF NOT EXISTS `artista`.`listing` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `seller` INT NOT NULL,
  `price` FLOAT NOT NULL,
  `description` VARCHAR(1000) NOT NULL,
  `timestamp` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `shown` TINYINT NOT NULL,
  `category` INT NOT NULL,
  `mainPic` INT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `id_idx` (`seller` ASC),
  INDEX `id_idx1` (`category` ASC),
  INDEX `idPicture_idx` (`mainPic` ASC),
  CONSTRAINT `fk_listing_seller`
    FOREIGN KEY (`seller`)
    REFERENCES `artista`.`seller` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_listing_category`
    FOREIGN KEY (`category`)
    REFERENCES `artista`.`category` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE,
  CONSTRAINT `fk_listing_picture`
    FOREIGN KEY (`mainPic`)
    REFERENCES `artista`.`picture` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `artista`.`portfolio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`portfolio` ;

CREATE TABLE IF NOT EXISTS `artista`.`portfolio` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `seller` INT NOT NULL,
  `description` VARCHAR(1000) NULL,
  PRIMARY KEY (`id`),
  INDEX `id_idx` (`seller` ASC),
  CONSTRAINT `fk_portfolio_seller`
    FOREIGN KEY (`seller`)
    REFERENCES `artista`.`seller` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `artista`.`listing_picture`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`listing_picture` ;

CREATE TABLE IF NOT EXISTS `artista`.`listing_picture` (
  `listing_id` INT NOT NULL,
  `picture_id` INT NOT NULL,
  PRIMARY KEY (`listing_id`, `picture_id`),
  INDEX `fk_listing_has_picture_picture1_idx` (`picture_id` ASC),
  INDEX `fk_listing_has_picture_listing1_idx` (`listing_id` ASC),
  CONSTRAINT `fk_listing_picture_listing1`
    FOREIGN KEY (`listing_id`)
    REFERENCES `artista`.`listing` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_listing_picture_picture1`
    FOREIGN KEY (`picture_id`)
    REFERENCES `artista`.`picture` (`id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `artista`.`portfolio_picture`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `artista`.`portfolio_picture` ;

CREATE TABLE IF NOT EXISTS `artista`.`portfolio_picture` (
  `portfolio_id` INT NOT NULL,
  `picture_id` INT NOT NULL,
  PRIMARY KEY (`portfolio_id`, `picture_id`),
  INDEX `fk_portfolio_has_picture_picture1_idx` (`picture_id` ASC),
  INDEX `fk_portfolio_has_picture_portfolio1_idx` (`portfolio_id` ASC),
  CONSTRAINT `fk_portfolio_picture_portfolio1`
    FOREIGN KEY (`portfolio_id`)
    REFERENCES `artista`.`portfolio` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_portfolio_picture_picture1`
    FOREIGN KEY (`picture_id`)
    REFERENCES `artista`.`picture` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `artista` ;

-- -----------------------------------------------------
-- procedure proc_addProfilePicture
-- -----------------------------------------------------

USE `artista`;
DROP procedure IF EXISTS `artista`.`proc_addProfilePicture`;

DELIMITER $$
USE `artista`$$
CREATE PROCEDURE `proc_addProfilePicture` (IN in_seller INT, IN in_path VARCHAR(255))
BEGIN

	INSERT INTO `picture`(`seller`,`isProfile`,`path`) VALUES (in_seller,1,in_path);
    
    SET @last_ins = (LAST_INSERT_ID());
    
	UPDATE `picture`
    SET `isProfile` = 0 
    WHERE `seller` = in_seller AND `id` != @last_ins;    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_addListingPicture
-- -----------------------------------------------------

USE `artista`;
DROP procedure IF EXISTS `artista`.`proc_addListingPicture`;

DELIMITER $$
USE `artista`$$
CREATE PROCEDURE `proc_addListingPicture` (IN in_listing INT, IN in_path VARCHAR(255))
BEGIN
    
	SET @numRows = (SELECT COUNT(*)  FROM `listing_picture` WHERE `listing_id` = in_listing);
    
    SET @seller_id = (SELECT seller FROM `listing` WHERE `id` = in_listing);
    
    INSERT INTO `picture`(`seller`,`isProfile`,`path`) VALUES (@seller_id,0,in_path);
    
    SET @last_insert = (LAST_INSERT_ID());
    
    IF @numRows = 0
    THEN UPDATE `listing` SET `mainPic` = @last_insert WHERE `id` = in_listing;
    END IF;
    
    INSERT INTO `listing_picture`(`listing_id`,`picture_id`) VALUES (in_listing, @last_insert);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure proc_addPortfolioPicture
-- -----------------------------------------------------

USE `artista`;
DROP procedure IF EXISTS `artista`.`proc_addPortfolioPicture`;

DELIMITER $$
USE `artista`$$
CREATE PROCEDURE `proc_addPortfolioPicture` (IN in_seller INT, IN in_path VARCHAR(255))
BEGIN    
    
	SET @portfolio_id = (SELECT `id` FROM `portfolio` WHERE `seller`=in_seller);
	

	INSERT INTO `picture`(`seller`,`isProfile`,`path`) VALUES (in_seller,0,in_path);
    
    SET @last_ins = (LAST_INSERT_ID());
    
    INSERT INTO `portfolio_picture`(`portfolio_id`,`picture_id`) VALUES (@portfolio_id, @last_ins);
END$$

DELIMITER ;
USE `artista`;

DELIMITER $$

USE `artista`$$
DROP TRIGGER IF EXISTS `artista`.`seller_AFTER_INSERT` $$
USE `artista`$$
CREATE DEFINER = CURRENT_USER TRIGGER `artista`.`seller_AFTER_INSERT` AFTER INSERT ON `seller` FOR EACH ROW
BEGIN
	UPDATE `artista`.`user` SET `type` = 1 WHERE `id`= NEW.user;
    INSERT INTO `artista`.`portfolio` (`seller`) VALUES (NEW.id);
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
